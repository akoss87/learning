Primitive types:
----------------
* bool (System.Boolean) - boolean (true/false)

* sbyte (System.Byte) - signed 8bit integer
* byte (System.SByte) - unsigned 8bit integer
* short (System.Int16) - signed 16bit integer
* ushort (System.UInt16) - unsigned 16bit integer
* int (System.Int32) - signed 32bit integer
* uint (System.UInt32) - unsigned 32bit integer
* long (System.Int64) - signed 64bit integer
* ulong (System.UInt64) - unsigned 64bit integer

* float (System.Single) - single-precision floating-point number
* double (System.Double) - double-precision floating-point number
* decimal (System.Decimal) - decimal number (money)

* char (System.Char) - 16bit unicode character
* string (System.String) - string of unicode chars

Array:
------
* Definition: An array stores a fixed-size sequential collection of elements of the same type.

* Type construction: element_type[]

* Declaration & initialization:
sbyte[] tomb = new sbyte[3];
sbyte[] tomb = new sbyte[3] { 3, 4, 1 };
sbyte[] tomb = new sbyte[] { 3, 4, 1 };
sbyte[] tomb = { 3, 4, 1 };

* Multi-dimensional -> több dimenziós
* Jagged array -> array of arrays ("fűrészfogas" tömb)

Enum:
-----
* Definition: Enumeration of integral values.

* Syntax: enum {Name}[ : {type}] (default: int)

* Flags enum: [Flags] attribute

Delegate:
---------
* Definition: Function type.

* Syntax: delegate {return_type} {Name}({arg_type arg_name}, {arg_type arg_name}, ...)

* Sample 1:

delegate int Operation(int x, int y);

int Add(int value1, int value2)
{
	return value1 + value2;
}

int Subtract(int value1, int value2)
{
	return value1 - value2;
}

void Main()
{
	Operation op;
	op = Add;
	op(5, 2).Dump();

	op = Subtract;
	op(5, 11).Dump();
}

* Sample 2:

delegate int Operation(int x, int y);

int Add(int value1, int value2)
{
	return value1 + value2;
}

int Subtract(int value1, int value2)
{
	return value1 - value2;
}

int Multiply(int value1, int value2)
{
	return value1 * value2;
}

int DivideInt(int value1, int value2)
{
	return value1 / value2;
}

void Main()
{
	Operation[] operations = { Add, Subtract, Multiply, DivideInt };
//  Operation[] operations = new Operation[4] { Add, Subtract, Multiply, DivideInt };
//	operations[0] = Add;
//	operations[1] = Subtract;
//	operations[2] = Multiply;
//	operations[3] = DivideInt;

	for (int i = 0; i < operations.Length; i++)
		operations[i](4, 2).Dump();
}

* Sample 3 (lambda syntax)

delegate int Operation(int x, int y);

void Main()
{
	Operation[] operations =
	{
		(value1, value2) => value1 + value2,
		(value1, value2) => value1 - value2,
        (value1, value2) => value1 * value2,
        (value1, value2) => value1 / value2
	};

	for (int i = 0; i < operations.Length; i++)
		operations[i](4, 2).Dump();
}

* Sample 4 (generic delegate)

void Main()
{
	Func<int, int, int>[] operations =
	{
		(value1, value2) => value1 + value2,
		(value1, value2) => value1 - value2,
        (value1, value2) => value1 * value2,
        (value1, value2) => value1 / value2
	};

	for (int i = 0; i < operations.Length; i++)
		operations[i](4, 2).Dump();
}